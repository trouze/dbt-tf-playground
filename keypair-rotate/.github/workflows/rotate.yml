# this is a reusable workflow that rotates the key pair for a snowflake service account
# to reuse, see launch_rotation.yml

name: Rotate Snowflake Credentials

on:
  workflow_call:
    inputs:
      snowflake_service_account:
        description: 'Name of Snowflake Service Account to Rotate'
        required: true
      dbt_cloud_project_id:
        description: 'DBT Cloud Project ID'
        required: true
      passphrase_name:
        description: Name of Azure key vault secret for passphrase
        required: true
      private_key_name:
        description: Azure key vault private key name
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  generate-key-pair:
    runs-on: ubuntu-latest
    steps:
      - name: Store passphrase as GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set SNOWFLAKE_PASSPHRASE --body "$(openssl rand -base64 32)"
      - name: Generate RSA key pair
        run: |
        openssl genrsa 2048 | openssl pkcs8 -topk8 -v2 des3 -inform PEM -out rsa_key.p8 -passout pass:${{ secrets.SNOWFLAKE_PASSPHRASE }}
        openssl rsa -in rsa_key.p8 -pubout -out rsa_key.pub

      - name: Store private key as GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set SNOWFLAKE_PRIVATE_KEY --body "$(cat rsa_key.p8)"
      - name: Store public key as GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set SNOWFLAKE_PUBLIC_KEY --body "$(cat rsa_key.pub | tr -d '\n' | sed 's/-----BEGIN PUBLIC KEY-----//' | sed 's/-----END PUBLIC KEY-----//')"

  rotate-key-pair:
    runs-on: ubuntu-latest
    needs: generate-key-pair
    steps:
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} #https://github.com/Azure/login?tab=readme-ov-file#login-with-a-service-principal-secret

      - name: Get old snowflake passphrase
        id: get_old_passphrase
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: >
            echo "OLD_PASSPHRASE=$(az keyvault secret show
            --vault-name ${{ secrets.AZURE_VAULT_NAME }}
            --name ${{ github.event.inputs.passphrase_name }}
            --query value
            --output tsv)" >> $GITHUB_ENV

      - name: Get old snowflake private key
        id: get_old_private_key
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: >
            az keyvault secret show
            --vault-name ${{ secrets.AZURE_VAULT_NAME }}
            --name ${{ github.event.inputs.private_key_name }}
            --query value
            --output tsv > old_rsa_key.p8

      - name: Rotate Snowflake Service Account Key Pair
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_PRIVATE_KEY_PASSPHRASE: $OLD_PASSPHRASE
        run: |
          snowsql -a $SNOWFLAKE_ACCOUNT -u ${{ github.event.inputs.snowflake_service_account }} --private-key-path old_rsa_key.p8 -q "
          ALTER USER ${{ github.event.inputs.snowflake_service_account }} SET RSA_PUBLIC_KEY_2 = RSA_PUBLIC_KEY;
          "
          snowsql -a $SNOWFLAKE_ACCOUNT -u ${{ github.event.inputs.snowflake_service_account }} --private-key-path old_rsa_key.p8 -q "
          ALTER USER ${{ github.event.inputs.snowflake_service_account }} UNSET RSA_PUBLIC_KEY;
          "
          snowsql -a $SNOWFLAKE_ACCOUNT -u ${{ github.event.inputs.snowflake_service_account }} --private-key-path old_rsa_key.p8 -q "
          ALTER USER ${{ github.event.inputs.snowflake_service_account }} SET RSA_PUBLIC_KEY='${{ secrets.SNOWFLAKE_PUBLIC_KEY }}';
          "
          snowsql -a $SNOWFLAKE_ACCOUNT -u ${{ github.event.inputs.snowflake_service_account }} --private-key-path old_rsa_key.p8 -q "
          ALTER USER ${{ github.event.inputs.snowflake_service_account }} UNSET RSA_PUBLIC_KEY_2;
          "

  update-azure-kv:
    runs-on: ubuntu-latest
    needs: rotate-key-pair
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} #https://github.com/Azure/login?tab=readme-ov-file#login-with-a-service-principal-secret

      - name: Upload Key Passphrase to Key Vault
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: >
            az keyvault secret set
            --vault-name ${{ secrets.AZURE_VAULT_NAME }}
            --name ${{ github.event.inputs.passphrase_name }}
            --value "${{ secrets.SNOWFLAKE_PASSPHRASE }}"

      - name: Upload RSA Private Key to Key Vault
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: >
            az keyvault secret set
            --vault-name ${{ secrets.AZURE_VAULT_NAME }}
            --name ${{ github.event.inputs.private_key_name }}
            --value "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}"

  update-dbt-cloud:
    runs-on: ubuntu-latest
    needs: rotate-key-pair
    env:
      TF_VAR_dbt_account_id: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}
      TF_VAR_dbt_token: ${{ secrets.DBT_CLOUD_TOKEN }}
      TF_VAR_dbt_host_url: "https://cloud.getdbt.com/api"
      TF_VAR_dbt_project_id: ${{ github.event.inputs.dbt_cloud_project_id }}
      TF_VAR_snowflake_private_key: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      TF_VAR_snowflake_passphrase: ${{ secrets.SNOWFLAKE_PASSPHRASE }}
      TF_VAR_snowflake_service_account: ${{ github.event.inputs.snowflake_service_account }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0  # Specify your Terraform version

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Apply Terraform Changes
        run: terraform apply -auto-approve tfplan